<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=x-sjis">
<meta name="robots" content="noindex,nofollow">
<meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
<title>信頼できない筋の情報 2002年2月</title>
<script src="/ga.js"></script>

</head>

<body bgcolor="#E0E7F0" text="#1F180F" link="#6666FF"
vlink="#FF6666">

<h1 align="center">信頼できない筋の情報</h1>

<h2>2002年</h2>

<h3>1月28日</h3>

<p>　フォントのスケルトン化に挑戦中。<br>
　なにげなくソートをしようとしたら、JDK 1.2以降にしかAPIがない。なるほどMSが独自パッケージを入れるわけだと納得したが、納得しても問題は解決しない。<br>
　（この世には、記憶すべきでないことがいくつかある。ソートのアルゴリズムもその一つだ。<br>
　ソートを不必要にコーディングすることによって生産されたバグの数はおそらく現在までに10万以上、それによって生じた損失の総額は5000万ドルを下るまい）</p>

<p>　というわけで、かねて懸案の、jview.exeの部分的なJDK
1.3化に挑戦した。全面的な1.3化は不可能だろうが、java.util.*だけでも1.3化できればぐっと楽になる。<br>
　結論：成功した。手順を以下に示す。<br>
1. MS SDK for Java 4.0（こんなものが世の中にはある。MSからダウンロードのこと）に含まれる、ClassD.exeを実行する。再起動するかと訊かれたら、Nと答える。<br>
2. %SystemRoot%\java\classes.zipの中にあるjava\utilを、JDKのrt.jarの中にあるjava\utilに差し替える。<br>
3. 再起動。<br>
　依存性は一切追っていないので、いつなにが起こるかわからないが、とりあえず私の使うものは使える。</p>

<p>　今日までの成果は、<br>
量：<a href="nikki_image/20020128_ryo_line.png">直線成分</a>
<a href="nikki_image/20020128_ryo_curve.png">曲線成分</a><br>
避：<a href="nikki_image/20020128_hi_line.png">直線成分</a>
<a href="nikki_image/20020128_hi_curve.png">曲線成分</a><br>
鬱：<a href="nikki_image/20020128_utu_line.png">直線成分</a>
<a href="nikki_image/20020128_utu_curve.png">曲線成分</a><br>
　25%くらいできたような気がする。</p>

<h3>1月27日</h3>

<p>　フォントのスケルトン化に挑戦中。今日までの成果は、<br>
量：<a href="nikki_image/20020127_ryo.png">直線成分</a><br>
鬱：<a href="nikki_image/20020127_utu.png">直線成分</a><br>
　曲線成分はまだだ。<br>
　どうやらものになりそうな気がしてきた。しかし先は長い。</p>

<h3>1月23日</h3>

<p>　Visual J++と、NTT DoCoMoの公式DoJaエミュレータを連携させることに成功した。<br>
　プロジェクトのプロパティのカスタム：「ビルド後に実行されるコマンド」に、事前検証やjarに固めるコマンドをずらずらと書けばいい。起動はカスタムで云々。<br>
　しかしpreverifyが遅くて頭にくる。</p>

<p>　javac、jikes、jvcの3つのJavaコンパイラを、uidemoのjarファイルの容量で比較してみたところ、javac
&lt; jikes &lt; jvcとなった。javacとそれ以外とでは1割近く違い、jikesとjvcの差はわずかだった。<br>
　IBMが磨き上げたjikesに負けるのは仕方ないとして、たいしたことはないと評判のjavacが一番小さいというのは面白い。KVM用のなにかがあるのかもしれない。<br>
　今度はKopiで試してみたいが、bootclasspathオプションがあったかどうか。</p>

<h3>1月21日</h3>

<p>　J2MEではデバッガは使えないので、残る問題は、J2MEのシステムクラスファイルをVisual
J++のjvc.exeが読み込めるか、である。<br>
　ネイティブコンパイラの理屈からいえば読み込めるはずだと思い、まずはJDK
1.3のrt.jarで試してみたところ、見事に読める。<br>
　オブジェクトブラウザから「現在のパッケージ/ライブラリを選択」ボタンを押し、「Javaのインストール済みパッケージ」のチェックを外す。プロジェクトのプロパティから「固有のパス」にrt.jarへのパスを加える。以上である。入力支援も完璧に働く。<br>
　これならCLDCでもいけるだろう。また一歩野望に近づいた。</p>

<p>　UML Pressの創刊号を読んだ。<br>
　私は、人のやらないことか、誰でもやっていることか、どちらかしかやらないことにしている。「流行の最先端」などというのはリスクばかり大きくて、しかも本当の最先端などではない。<br>
　よって、デザインパターンもUMLもXPも無視していたが、どうもかなり普及したようなので、手始めにUML
Pressを読んでみたのだった。<br>
　デザインパターン：概念の直交性が悪くて落ち着かない。<br>
　UML：実装と設計を分離するのは大変ですね。<br>
　XP：14カ条が全部実行できたら、いい結果が出て当たり前。</p>

<h3>1月18日</h3>

<p>　Visual J++とJDKを統合しようとして色々調べたが、どうやらデバッガがネックになっていて、一筋縄ではいかないことがわかった。<br>
　どうせJ2MEではデバッガが使えないので、デバッガは無視することに決めた。</p>

<h3>1月17日</h3>

<p>　フォントのスケルトン化に挑戦中。今日までの成果は、<br>
あ：<a href="nikki_image/20020117_a_line.png">直線</a>　<a
href="nikki_image/20020117_a_curve.png">曲線</a><br>
量：<a href="nikki_image/20020117_ryo_line.png">直線</a>　<a
href="nikki_image/20020117_ryo_curve.png">曲線</a><br>
鬱：<a href="nikki_image/20020117_utu_line.png">直線</a>　<a
href="nikki_image/20020117_utu_curve.png">曲線</a><br>
　バグだらけなのはご愛嬌として……このアルゴリズムは根本的にダメかもしれない。うーむ。</p>

<h3>1月10日</h3>

<p>　昨日の続き。<br>
　調べてみてわかった。JDK 1.1.xまでとJDK 1.2.x以降では、BufferedInputStream.read(...)の挙動が違う。MSの実装は、JDK
1.1.x準拠だからあれで正しい。<br>
　夢にも思わなかった――こんなに重要なAPIの挙動を、たいしたメリットもないのに、こんなにドラスティックに変えるとは。<br>
　古い挙動の評判が悪かったとしても、同じメソッド名にする理由が、まったくわからない。readAuto(...)というメソッドでも新設すればいいではないか。いったい、なぜAPIの挙動を変えたのか。あきれて物が言えないとはこのことだ。<br>
　プラットフォームの仕様変更に関する$unのポリシーは、いったいどうなっているのか。Javaはもう駄目だとは思っていたが、駄目どころか狂っているらしい。</p>

<h3>1月9日</h3>

<p>　Visual J++ 6.0を手に入れた。<br>
　アンチ$unな気分がたまらなく素晴らしい。また、噂にきくとおり、実によくできたIDEで、重く不可解なForteとは雲泥の差がある。<br>
　が、さすがにアンチ$unだけあって、たとえばBufferedInputStreamの動作は、どう考えてもMSのほうがおかしい。$unのドキュメントによれば、バッファの最後まで読んだら自動的に補充されることになっているが、MSの実装ではバッファが尽きるところまでしか読めない。これが世に名高いMS商法か。うーむ。</p>

<p>　…と思ったら、翌日へ続く。</p>

<p>　</p>

<p align="center"><a href="menu.html">[メニューに戻る]</a>
</p>
</body>
</html>
